{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","username","className","alt","src","CardList","friends","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","this","setState","Component","App","onRequestMonsters","searchField","onSearchChange","monsters","isPending","filteredMonsters","filter","monster","toLowerCase","includes","connect","searchFriends","requestMonsters","pending","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateMonsters","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.0d6bc75c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({id, name,  email, username}) => {\n  return (\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?200x200&set=set2`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n        <p>{username}</p>\n      </div>\n    </div>\n  );\n}\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ friends }) => {\n  return (\n    <div>\n      {friends.map((user, i) => {\n        return (\n          <Card\n            key={i}\n            id={friends[i].id}\n            name={friends[i].name}\n            email={friends[i].email}\n            username={friends[i].username}\n          />\n        );\n      })}\n    </div>\n  );\n};\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search friends\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        border: \"5px solid black\",\n        height: \"980px\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error) {\n    //console.log(error);\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oops. This is not good</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\nimport \"./App.css\";\nimport { setSearchField, requestMonsters } from \"../actions\";\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchFriends.searchField,\n    monsters: state.requestMonsters.monsters,\n    pending: state.requestMonsters.isPending,\n    error: state.requestMonsters.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestMonsters: () => dispatch(requestMonsters()),\n  };\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestMonsters();\n  }\n\n  render() {\n    const { searchField, onSearchChange, monsters, isPending } = this.props;\n    const filteredMonsters = monsters.filter((monster) => {\n      return monster.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    return isPending ? (\n      <h1 className=\"tc\">Loading</h1>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f2\">MonstaFriends</h1>\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <ErrorBoundry>\n            <CardList friends={filteredMonsters} />\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_MONSTERS_PENDING,\n  REQUEST_MONSTERS_SUCCESS,\n  REQUEST_MONSTERS_FAILED,\n} from \"./constants.js\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestMonsters = () => (dispatch) => {\n  dispatch({ type: REQUEST_MONSTERS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((response) => response.json())\n    .then((data) => dispatch({ type: REQUEST_MONSTERS_SUCCESS, payload: data }))\n    .catch((error) =>\n      dispatch({ type: REQUEST_MONSTERS_FAILED, payload: error })\n    );\n};\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_MONSTERS_PENDING = 'REQUEST_MONSTERS_PENDING';\nexport const REQUEST_MONSTERS_SUCCESS = 'REQUEST_MONSTERS_SUCCESS';\nexport const REQUEST_MONSTERS_FAILED = 'REQUEST_MONSTERS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_MONSTERS_PENDING,\n  REQUEST_MONSTERS_SUCCESS,\n  REQUEST_MONSTERS_FAILED,\n} from \"./constants.js\";\n\nconst initialStateSearch = {\n  searchField: \"\",\n};\n\nexport const searchFriends = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      // deconstruct with\n      // can also do { ...state, {searchField: action.payload} };\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nconst initialStateMonsters = {\n  isPending: false,\n  monsters: [],\n  error: ''\n}\nexport const requestMonsters = (state = initialStateMonsters, action = {}) => {\n  switch (action.type) {\n    case REQUEST_MONSTERS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_MONSTERS_SUCCESS:\n      return Object.assign({}, state, { monsters: action.payload, isPending: false, });\n    case REQUEST_MONSTERS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false, });\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { searchFriends, requestMonsters } from \"./reducers\";\nimport \"tachyons\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchFriends, requestMonsters });\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}